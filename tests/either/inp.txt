enum Either[L: Type, R: Type] {
  left(L),
  right(R),
}

fn swap[L: Type, R: Type](e: Either[L, R]): Either[R, L] {
  match e {
    left(x) { right[R, L](x) }
    right(x) { left[R, L](x) }
  }
}

fn unwrap[T: Type](e: Either[T, T]): T {
  match e {
    left(x) { x }
    right(x) { x }
  }
}

fn default[T: Type, U: Type](e: Either[T, U], d: T): T {
  match e {
    left(x) { x }
    right(_) { d }
  }
}

fn main(): () { () }
