enum Option[T: Type] {
  some(T),
  none(()),
}

fn replace[T: Type, U: Type](opt: Option[T], y: U): Option[U] {
  match opt {
    some(x) { some[U](y) }
    none(()) { none[U](()) }
  }
}

fn default[T: Type](e: Option[T], d: T): T {
  match e {
    some(x) { x }
    none(()) { d }
  }
}


fn main(): () { () }
